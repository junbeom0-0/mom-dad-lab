# -*- coding: utf-8 -*-
"""assemble matrix .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wJixUAfKtaHDSioP2FjzY8LGqAYyNfl9
"""

import numpy as np
import pandas as pd

"""인접 리스트를 넣는 과정

"""

A=int(input("파츠 수 : "))
list1=[]
for i in range(A):
    list1.append(chr(ord('A') + i))
input=[list(map(int,input("파츠들의 관계 : ").split())) for _ in range(A)]

matrix = input

"""조립가능한 순서를 만들고 기록하는 단계"""

def nextlevel(assemble_list,states):
  newassemble_list=[]
  for a in range(len(assemble_list)) :
    for b in range(len(matrix)):
      if assemble_list[a][b] > 0:
        temp=assemble_list[a][-1]
        current_states=[]
        for i in range(len(temp)):
          current_states.append(f"{chr(65+temp[i])}")
          current_states=["".join(current_states)]
          
        current_states.append(f"{chr(65+b)}") 
        current_states=["".join(current_states)]
        states= states + current_states
        new_matrix = np.array(matrix[b][:])+np.array(assemble_list[a][0:len(matrix)] )
        new_temp=temp+ [b]
        new_matrix[new_temp]=0
        new_matrix=list(new_matrix)
        new_matrix.append(new_temp)
        newassemble_list.append(new_matrix)
  assemble_list=newassemble_list
  return assemble_list,states

import numpy as np

def assembly_transition_matrix():
    states = []
    assemble_list=[]
    new_matrix=[]
    for i in range(len(matrix)):
        for j in range(i+1, len(matrix)):
            if matrix[i][j]==1 :
              check=[]
              current_states=[]
              new_matrix = np.array(matrix[i][:])+np.array(matrix[j][:])
              check.append(i)
              check.append(j)
              new_matrix[check]=0
              new_matrix=list(new_matrix)
              new_matrix.append(check)
              current_states.append(f"{chr(65+i)}{chr(65+j)}")
              states= states + current_states
              assemble_list.append(new_matrix)
      
    return assemble_list,states

assemble_list,states =assembly_transition_matrix()
for i in range(1,len(matrix)-1):
     assemble_list,states =nextlevel(assemble_list,states)


"""조립할수 있는 순서를 순서대로 표시"""

final_states=[]
for i in range(len(states)):
  sorted_states=[]
  sorted_states=sorted(states[i])
  sorted_states=["".join(sorted_states)]
  final_states.append(sorted_states[0])


result = []
for value in final_states:
    if value not in result:
        result.append(value)
result.insert(0, 'A/B/C/D')

"""매트릭스를 만들고 조합 정보를 기록

"""

zeros=np.zeros((len(result),len(result)))
df=pd.DataFrame(zeros,index=result,columns=result)

for a in  range(len(states)):
  for b in range(len(states)):
   if len(states[a]) == len(states[b])+1:
     if states[b] in states[a]:
       sorted_states1=[]
       sorted_states1=sorted(states[a])
       sorted_states1=["".join(sorted_states1)]
       sorted_states2=[]
       sorted_states2=sorted(states[b])
       sorted_states2=["".join(sorted_states2)]
       df[sorted_states1[0]][sorted_states2[0]] =1

for i in range(len(result)):
  if len(result[i]) == 2:
    df.iloc[0][i]=1

df

